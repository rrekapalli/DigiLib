// Mocks generated by Mockito 5.4.5 from annotations
// in digi_lib_app/test/services/library_api_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i2;

import 'package:digi_lib_app/src/network/api_client.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFuture_0<T1> extends _i1.SmartFake implements _i2.Future<T1> {
  _FakeFuture_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ApiClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiClient extends _i1.Mock implements _i3.ApiClient {
  MockApiClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get hasAuthToken => (super.noSuchMethod(
        Invocation.getter(#hasAuthToken),
        returnValue: false,
      ) as bool);

  @override
  String get baseUrl => (super.noSuchMethod(
        Invocation.getter(#baseUrl),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#baseUrl),
        ),
      ) as String);

  @override
  _i2.Future<T> get<T>(
    String? path, {
    Map<String, dynamic>? queryParams,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [path],
          {#queryParams: queryParams},
        ),
        returnValue: _i4.ifNotNull(
              _i4.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #get,
                  [path],
                  {#queryParams: queryParams},
                ),
              ),
              (T v) => _i2.Future<T>.value(v),
            ) ??
            _FakeFuture_0<T>(
              this,
              Invocation.method(
                #get,
                [path],
                {#queryParams: queryParams},
              ),
            ),
      ) as _i2.Future<T>);

  @override
  _i2.Future<T> post<T>(
    String? path, {
    Object? body,
    Map<String, dynamic>? queryParams,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [path],
          {
            #body: body,
            #queryParams: queryParams,
          },
        ),
        returnValue: _i4.ifNotNull(
              _i4.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #post,
                  [path],
                  {
                    #body: body,
                    #queryParams: queryParams,
                  },
                ),
              ),
              (T v) => _i2.Future<T>.value(v),
            ) ??
            _FakeFuture_0<T>(
              this,
              Invocation.method(
                #post,
                [path],
                {
                  #body: body,
                  #queryParams: queryParams,
                },
              ),
            ),
      ) as _i2.Future<T>);

  @override
  _i2.Future<T> put<T>(
    String? path, {
    Object? body,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [path],
          {#body: body},
        ),
        returnValue: _i4.ifNotNull(
              _i4.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #put,
                  [path],
                  {#body: body},
                ),
              ),
              (T v) => _i2.Future<T>.value(v),
            ) ??
            _FakeFuture_0<T>(
              this,
              Invocation.method(
                #put,
                [path],
                {#body: body},
              ),
            ),
      ) as _i2.Future<T>);

  @override
  _i2.Future<T> delete<T>(String? path) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [path],
        ),
        returnValue: _i4.ifNotNull(
              _i4.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #delete,
                  [path],
                ),
              ),
              (T v) => _i2.Future<T>.value(v),
            ) ??
            _FakeFuture_0<T>(
              this,
              Invocation.method(
                #delete,
                [path],
              ),
            ),
      ) as _i2.Future<T>);

  @override
  void setAuthToken(String? token) => super.noSuchMethod(
        Invocation.method(
          #setAuthToken,
          [token],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearAuthToken() => super.noSuchMethod(
        Invocation.method(
          #clearAuthToken,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
